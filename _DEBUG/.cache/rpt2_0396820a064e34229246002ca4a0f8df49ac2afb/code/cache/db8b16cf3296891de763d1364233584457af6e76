{"code":"export function autobind(target, key, descriptor) {\r\n    let fn = descriptor.value;\r\n    let defining = false;\r\n    return {\r\n        configurable: true,\r\n        get() {\r\n            if (defining || (fn && this === fn.prototype) || this.hasOwnProperty(key)) {\r\n                return fn;\r\n            }\r\n            let fnBound = fn && fn.bind(this);\r\n            defining = true;\r\n            Object.defineProperty(this, key, {\r\n                configurable: true,\r\n                writable: true,\r\n                enumerable: true,\r\n                value: fnBound\r\n            });\r\n            defining = false;\r\n            return fnBound;\r\n        },\r\n        set(newValue) {\r\n            Object.defineProperty(this, key, {\r\n                configurable: true,\r\n                writable: true,\r\n                enumerable: true,\r\n                value: newValue\r\n            });\r\n        }\r\n    };\r\n}\r\n"}
