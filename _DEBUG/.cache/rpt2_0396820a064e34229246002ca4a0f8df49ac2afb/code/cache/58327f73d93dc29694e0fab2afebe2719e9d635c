{"code":"import * as React from 'react';\r\nimport { Async } from './Async';\r\nimport { EventGroup } from './EventGroup';\r\nimport { warnDeprecations, warnMutuallyExclusive, warnConditionallyRequiredProps } from './warn';\r\nimport { initializeFocusRects } from './initializeFocusRects';\r\nimport { initializeDir } from './initializeDir';\r\nexport class BaseComponent extends React.Component {\r\n    constructor(props, context) {\r\n        super(props, context);\r\n        initializeFocusRects();\r\n        initializeDir();\r\n        _makeAllSafe(this, BaseComponent.prototype, [\r\n            'componentDidMount',\r\n            'shouldComponentUpdate',\r\n            'getSnapshotBeforeUpdate',\r\n            'render',\r\n            'componentDidUpdate',\r\n            'componentWillUnmount'\r\n        ]);\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        this._updateComponentRef(prevProps, this.props);\r\n    }\r\n    componentDidMount() {\r\n        this._setComponentRef(this.props.componentRef, this);\r\n    }\r\n    componentWillUnmount() {\r\n        this._setComponentRef(this.props.componentRef, null);\r\n        if (this.__disposables) {\r\n            for (let i = 0, len = this._disposables.length; i < len; i++) {\r\n                let disposable = this.__disposables[i];\r\n                if (disposable.dispose) {\r\n                    disposable.dispose();\r\n                }\r\n            }\r\n            this.__disposables = null;\r\n        }\r\n    }\r\n    get className() {\r\n        if (!this.__className) {\r\n            let funcNameRegex = /function (.{1,})\\(/;\r\n            let results = funcNameRegex.exec(this.constructor.toString());\r\n            this.__className = results && results.length > 1 ? results[1] : '';\r\n        }\r\n        return this.__className;\r\n    }\r\n    get _disposables() {\r\n        if (!this.__disposables) {\r\n            this.__disposables = [];\r\n        }\r\n        return this.__disposables;\r\n    }\r\n    get _async() {\r\n        if (!this.__async) {\r\n            this.__async = new Async(this);\r\n            this._disposables.push(this.__async);\r\n        }\r\n        return this.__async;\r\n    }\r\n    get _events() {\r\n        if (!this.__events) {\r\n            this.__events = new EventGroup(this);\r\n            this._disposables.push(this.__events);\r\n        }\r\n        return this.__events;\r\n    }\r\n    _resolveRef(refName) {\r\n        if (!this.__resolves) {\r\n            this.__resolves = {};\r\n        }\r\n        if (!this.__resolves[refName]) {\r\n            this.__resolves[refName] = (ref) => {\r\n                return (this[refName] = ref);\r\n            };\r\n        }\r\n        return this.__resolves[refName];\r\n    }\r\n    _updateComponentRef(currentProps, newProps = {}) {\r\n        if (currentProps && newProps && currentProps.componentRef !== newProps.componentRef) {\r\n            this._setComponentRef(currentProps.componentRef, null);\r\n            this._setComponentRef(newProps.componentRef, this);\r\n        }\r\n    }\r\n    _warnDeprecations(deprecationMap) {\r\n        warnDeprecations(this.className, this.props, deprecationMap);\r\n    }\r\n    _warnMutuallyExclusive(mutuallyExclusiveMap) {\r\n        warnMutuallyExclusive(this.className, this.props, mutuallyExclusiveMap);\r\n    }\r\n    _warnConditionallyRequiredProps(requiredProps, conditionalPropName, condition) {\r\n        warnConditionallyRequiredProps(this.className, this.props, requiredProps, conditionalPropName, condition);\r\n    }\r\n    _setComponentRef(ref, value) {\r\n        if (!this._skipComponentRefResolution && ref) {\r\n            if (typeof ref === 'function') {\r\n                ref(value);\r\n            }\r\n            if (typeof ref === 'object') {\r\n                ref.current = value;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction _makeAllSafe(obj, prototype, methodNames) {\r\n    for (let i = 0, len = methodNames.length; i < len; i++) {\r\n        _makeSafe(obj, prototype, methodNames[i]);\r\n    }\r\n}\r\nfunction _makeSafe(obj, prototype, methodName) {\r\n    let classMethod = obj[methodName];\r\n    let prototypeMethod = prototype[methodName];\r\n    if (classMethod || prototypeMethod) {\r\n        obj[methodName] = function () {\r\n            let retVal;\r\n            if (prototypeMethod) {\r\n                retVal = prototypeMethod.apply(this, arguments);\r\n            }\r\n            if (classMethod !== prototypeMethod) {\r\n                retVal = classMethod.apply(this, arguments);\r\n            }\r\n            return retVal;\r\n        };\r\n    }\r\n}\r\nexport function nullRender() {\r\n    return null;\r\n}\r\n"}
