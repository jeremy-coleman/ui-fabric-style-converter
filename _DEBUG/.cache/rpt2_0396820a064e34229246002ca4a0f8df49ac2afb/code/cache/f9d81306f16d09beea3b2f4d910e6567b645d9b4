{"code":"import { extractStyleParts } from './extractStyleParts';\r\nimport { concatStyleSets } from './concatStyleSets';\r\nimport { styleToRegistration, applyRegistration } from './styleToClassName';\r\nexport function mergeStyleSets(...styleSets) {\r\n    const classNameSet = { subComponentStyles: {} };\r\n    const classMap = {};\r\n    const styleSet = styleSets[0];\r\n    if (!styleSet && styleSets.length <= 1) {\r\n        return { subComponentStyles: {} };\r\n    }\r\n    let concatenatedStyleSet = styleSet;\r\n    concatenatedStyleSet = concatStyleSets(...styleSets);\r\n    const registrations = [];\r\n    for (const styleSetArea in concatenatedStyleSet) {\r\n        if (concatenatedStyleSet.hasOwnProperty(styleSetArea)) {\r\n            if (styleSetArea === 'subComponentStyles') {\r\n                classNameSet.subComponentStyles = concatenatedStyleSet.subComponentStyles || {};\r\n                continue;\r\n            }\r\n            const styles = concatenatedStyleSet[styleSetArea];\r\n            const { classes, objects } = extractStyleParts(styles);\r\n            const registration = styleToRegistration({ displayName: styleSetArea }, objects);\r\n            registrations.push(registration);\r\n            if (registration) {\r\n                classMap[styleSetArea] = registration.className;\r\n                classNameSet[styleSetArea] = classes.concat([registration.className]).join(' ');\r\n            }\r\n        }\r\n    }\r\n    for (const registration of registrations) {\r\n        if (registration) {\r\n            applyRegistration(registration, classMap);\r\n        }\r\n    }\r\n    return classNameSet;\r\n}\r\n"}
