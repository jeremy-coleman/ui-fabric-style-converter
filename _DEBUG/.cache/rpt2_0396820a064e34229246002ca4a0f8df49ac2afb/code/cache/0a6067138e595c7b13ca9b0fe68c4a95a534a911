{"code":"export function concatStyleSets(...styleSets) {\r\n    const mergedSet = {};\r\n    const workingSubcomponentStyles = {};\r\n    for (const currentSet of styleSets) {\r\n        if (currentSet) {\r\n            for (const prop in currentSet) {\r\n                if (currentSet.hasOwnProperty(prop)) {\r\n                    if (prop === 'subComponentStyles' && currentSet.subComponentStyles !== undefined) {\r\n                        const currentComponentStyles = currentSet.subComponentStyles;\r\n                        for (const subCompProp in currentComponentStyles) {\r\n                            if (currentComponentStyles.hasOwnProperty(subCompProp)) {\r\n                                if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\r\n                                    workingSubcomponentStyles[subCompProp].push(currentComponentStyles[subCompProp]);\r\n                                }\r\n                                else {\r\n                                    workingSubcomponentStyles[subCompProp] = [currentComponentStyles[subCompProp]];\r\n                                }\r\n                            }\r\n                        }\r\n                        continue;\r\n                    }\r\n                    const mergedValue = mergedSet[prop];\r\n                    const currentValue = currentSet[prop];\r\n                    if (mergedValue === undefined) {\r\n                        mergedSet[prop] = currentValue;\r\n                    }\r\n                    else {\r\n                        mergedSet[prop] = [\r\n                            ...(Array.isArray(mergedValue) ? mergedValue : [mergedValue]),\r\n                            ...(Array.isArray(currentValue) ? currentValue : [currentValue])\r\n                        ];\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let isFunction = (v) => v === typeof 'function';\r\n    if (Object.keys(workingSubcomponentStyles).length > 0) {\r\n        mergedSet.subComponentStyles = {};\r\n        const mergedSubStyles = mergedSet.subComponentStyles;\r\n        for (const subCompProp in workingSubcomponentStyles) {\r\n            if (workingSubcomponentStyles.hasOwnProperty(subCompProp)) {\r\n                const workingSet = workingSubcomponentStyles[subCompProp];\r\n                mergedSubStyles[subCompProp] = (styleProps) => {\r\n                    return concatStyleSets(...workingSet.map((_S) => isFunction(_S) ? _S(styleProps) : _S));\r\n                };\r\n            }\r\n        }\r\n    }\r\n    return mergedSet;\r\n}\r\n"}
