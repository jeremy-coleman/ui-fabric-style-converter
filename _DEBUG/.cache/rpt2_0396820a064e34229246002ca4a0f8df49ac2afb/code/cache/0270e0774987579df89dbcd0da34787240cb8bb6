{"code":"import * as React from 'react';\r\nimport { concatStyleSets } from '@uifabric/merge-styles';\r\nimport { Customizations } from './Customizations';\r\nimport { CustomizerContext } from './Customizer';\r\nconst DefaultFields = ['theme', 'styles'];\r\nexport function styled(Component, baseStyles, getProps, customizable) {\r\n    customizable = customizable || { scope: '', fields: undefined };\r\n    const { scope, fields = DefaultFields } = customizable;\r\n    class Wrapped extends React.Component {\r\n        constructor() {\r\n            super(...arguments);\r\n            this._inCustomizerContext = false;\r\n            this._onSettingsChanged = () => this.forceUpdate();\r\n        }\r\n        render() {\r\n            return (React.createElement(CustomizerContext.Consumer, null, (context) => {\r\n                this._inCustomizerContext = !!context.customizations.inCustomizerContext;\r\n                const settings = Customizations.getSettings(fields, scope, context.customizations);\r\n                const { styles: customizedStyles, ...rest } = settings;\r\n                const styles = (styleProps) => _resolve(styleProps, baseStyles, customizedStyles, this.props.styles);\r\n                const additionalProps = getProps ? getProps(this.props) : undefined;\r\n                return React.createElement(Component, Object.assign({}, rest, additionalProps, this.props, { styles: styles }));\r\n            }));\r\n        }\r\n        componentDidMount() {\r\n            if (!this._inCustomizerContext) {\r\n                Customizations.observe(this._onSettingsChanged);\r\n            }\r\n        }\r\n        componentWillUnmount() {\r\n            if (!this._inCustomizerContext) {\r\n                Customizations.unobserve(this._onSettingsChanged);\r\n            }\r\n        }\r\n    }\r\n    Wrapped.displayName = `Styled${Component.displayName || Component.name}`;\r\n    return Wrapped;\r\n}\r\nfunction _resolve(styleProps, ...allStyles) {\r\n    const result = [];\r\n    for (const styles of allStyles) {\r\n        if (styles) {\r\n            result.push(typeof styles === 'function' ? styles(styleProps) : styles);\r\n        }\r\n    }\r\n    if (result.length) {\r\n        return concatStyleSets(...result);\r\n    }\r\n    return undefined;\r\n}\r\n"}
