{"code":"import { GlobalSettings } from './GlobalSettings';\r\nimport { EventGroup } from './EventGroup';\r\nconst CustomizationsGlobalKey = 'customizations';\r\nconst NO_CUSTOMIZATIONS = { settings: {}, scopedSettings: {}, inCustomizerContext: false };\r\nlet _allSettings = GlobalSettings.getValue(CustomizationsGlobalKey, {\r\n    settings: {},\r\n    scopedSettings: {},\r\n    inCustomizerContext: false\r\n});\r\nconst _events = new EventGroup(_allSettings);\r\nexport class Customizations {\r\n    static reset() {\r\n        _allSettings.settings = {};\r\n        _allSettings.scopedSettings = {};\r\n    }\r\n    static applySettings(settings) {\r\n        _allSettings.settings = { ..._allSettings.settings, ...settings };\r\n        Customizations._raiseChange();\r\n    }\r\n    static applyScopedSettings(scopeName, settings) {\r\n        _allSettings.scopedSettings[scopeName] = { ..._allSettings.scopedSettings[scopeName], ...settings };\r\n        Customizations._raiseChange();\r\n    }\r\n    static getSettings(properties, scopeName, localSettings = NO_CUSTOMIZATIONS) {\r\n        const settings = {};\r\n        const localScopedSettings = (scopeName && localSettings.scopedSettings[scopeName]) || {};\r\n        const globalScopedSettings = (scopeName && _allSettings.scopedSettings[scopeName]) || {};\r\n        for (let property of properties) {\r\n            settings[property] =\r\n                localScopedSettings[property] ||\r\n                    localSettings.settings[property] ||\r\n                    globalScopedSettings[property] ||\r\n                    _allSettings.settings[property];\r\n        }\r\n        return settings;\r\n    }\r\n    static observe(onChange) {\r\n        _events.on(_allSettings, 'change', onChange);\r\n    }\r\n    static unobserve(onChange) {\r\n        _events.off(_allSettings, 'change', onChange);\r\n    }\r\n    static _raiseChange() {\r\n        _events.raise('change');\r\n    }\r\n}\r\n"}
