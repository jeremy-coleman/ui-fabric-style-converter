{"code":"import { Stylesheet } from '../Stylesheet';\r\nconst LEFT = 'left';\r\nconst RIGHT = 'right';\r\nconst NO_FLIP = '@noflip';\r\nconst NAME_REPLACEMENTS = {\r\n    [LEFT]: RIGHT,\r\n    [RIGHT]: LEFT\r\n};\r\nconst VALUE_REPLACEMENTS = {\r\n    'w-resize': 'e-resize',\r\n    'sw-resize': 'se-resize',\r\n    'nw-resize': 'ne-resize'\r\n};\r\nlet _rtl = _msGetRTL();\r\nexport function _msSetRTL(isRTL) {\r\n    if (_rtl !== isRTL) {\r\n        Stylesheet.getInstance().resetKeys();\r\n        _rtl = isRTL;\r\n    }\r\n}\r\nexport function _msGetRTL() {\r\n    if (_rtl === undefined) {\r\n        _rtl = typeof document !== 'undefined' && !!document.documentElement && document.documentElement.getAttribute('dir') === 'rtl';\r\n    }\r\n    return _rtl;\r\n}\r\nexport function rtlifyRules(rulePairs, index) {\r\n    if (_msGetRTL()) {\r\n        const name = rulePairs[index];\r\n        if (!name) {\r\n            return;\r\n        }\r\n        const value = rulePairs[index + 1];\r\n        if (typeof value === 'string' && value.indexOf(NO_FLIP) >= 0) {\r\n            rulePairs[index + 1] = value.replace(/\\s*(?:\\/\\*\\s*)?\\@noflip\\b(?:\\s*\\*\\/)?\\s*?/g, '');\r\n        }\r\n        else if (name.indexOf(LEFT) >= 0) {\r\n            rulePairs[index] = name.replace(LEFT, RIGHT);\r\n        }\r\n        else if (name.indexOf(RIGHT) >= 0) {\r\n            rulePairs[index] = name.replace(RIGHT, LEFT);\r\n        }\r\n        else if (String(value).indexOf(LEFT) >= 0) {\r\n            rulePairs[index + 1] = value.replace(LEFT, RIGHT);\r\n        }\r\n        else if (String(value).indexOf(RIGHT) >= 0) {\r\n            rulePairs[index + 1] = value.replace(RIGHT, LEFT);\r\n        }\r\n        else if (NAME_REPLACEMENTS[name]) {\r\n            rulePairs[index] = NAME_REPLACEMENTS[name];\r\n        }\r\n        else if (VALUE_REPLACEMENTS[value]) {\r\n            rulePairs[index + 1] = VALUE_REPLACEMENTS[value];\r\n        }\r\n        else {\r\n            switch (name) {\r\n                case 'margin':\r\n                case 'padding':\r\n                    rulePairs[index + 1] = flipQuad(value);\r\n                    break;\r\n                case 'box-shadow':\r\n                    rulePairs[index + 1] = negateNum(value, 0);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction negateNum(value, partIndex) {\r\n    const parts = value.split(' ');\r\n    const numberVal = parseInt(parts[partIndex], 10);\r\n    parts[0] = parts[0].replace(String(numberVal), String(numberVal * -1));\r\n    return parts.join(' ');\r\n}\r\nfunction flipQuad(value) {\r\n    if (typeof value === 'string') {\r\n        const parts = value.split(' ');\r\n        if (parts.length === 4) {\r\n            return `${parts[0]} ${parts[3]} ${parts[2]} ${parts[1]}`;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n"}
