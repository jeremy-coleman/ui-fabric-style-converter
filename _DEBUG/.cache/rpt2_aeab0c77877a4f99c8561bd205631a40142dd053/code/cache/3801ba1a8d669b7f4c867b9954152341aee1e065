{"code":"let _warningCallback = undefined;\r\nexport function warnDeprecations(componentName, props, deprecationMap) {\r\n    for (const propName in deprecationMap) {\r\n        if (props && propName in props) {\r\n            let deprecationMessage = `${componentName} property '${propName}' was used but has been deprecated.`;\r\n            const replacementPropName = deprecationMap[propName];\r\n            if (replacementPropName) {\r\n                deprecationMessage += ` Use '${replacementPropName}' instead.`;\r\n            }\r\n            warn(deprecationMessage);\r\n        }\r\n    }\r\n}\r\nexport function warnMutuallyExclusive(componentName, props, exclusiveMap) {\r\n    for (const propName in exclusiveMap) {\r\n        if (props && propName in props) {\r\n            let propInExclusiveMapValue = exclusiveMap[propName];\r\n            if (propInExclusiveMapValue && propInExclusiveMapValue in props) {\r\n                warn(`${componentName} property '${propName}' is mutually exclusive with '${exclusiveMap[propName]}'. Use one or the other.`);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function warnConditionallyRequiredProps(componentName, props, requiredProps, conditionalPropName, condition) {\r\n    if (condition === true) {\r\n        for (const requiredPropName of requiredProps) {\r\n            if (!(requiredPropName in props)) {\r\n                warn(`${componentName} property '${requiredPropName}' is required when '${conditionalPropName}' is used.'`);\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function warn(message) {\r\n    if (_warningCallback) {\r\n        _warningCallback(message);\r\n    }\r\n    else if (console && console.warn) {\r\n        console.warn(message);\r\n    }\r\n}\r\nexport function setWarningCallback(warningCallback) {\r\n    _warningCallback = warningCallback;\r\n}\r\n"}
