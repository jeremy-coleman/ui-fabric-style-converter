{"code":"import { GlobalSettings, warn } from '@uifabric/utilities';\r\nimport { fontFace, mergeStyles, Stylesheet } from '@uifabric/merge-styles';\r\nconst ICON_SETTING_NAME = 'icons';\r\nconst _iconSettings = GlobalSettings.getValue(ICON_SETTING_NAME, {\r\n    __options: {\r\n        disableWarnings: false,\r\n        warnOnMissingIcons: true\r\n    },\r\n    __remapped: {}\r\n});\r\nconst stylesheet = Stylesheet.getInstance();\r\nif (stylesheet && stylesheet.onReset) {\r\n    stylesheet.onReset(() => {\r\n        for (const name in _iconSettings) {\r\n            if (_iconSettings.hasOwnProperty(name) && !!_iconSettings[name].subset) {\r\n                _iconSettings[name].subset.className = undefined;\r\n            }\r\n        }\r\n    });\r\n}\r\nconst normalizeIconName = (name) => name.toLowerCase();\r\nexport function registerIcons(iconSubset, options) {\r\n    let subset = {\r\n        ...iconSubset,\r\n        isRegistered: false,\r\n        className: undefined\r\n    };\r\n    let { icons } = iconSubset;\r\n    options = options ? { ..._iconSettings.__options, ...options } : _iconSettings.__options;\r\n    for (const iconName in icons) {\r\n        if (icons.hasOwnProperty(iconName)) {\r\n            const code = icons[iconName];\r\n            const normalizedIconName = normalizeIconName(iconName);\r\n            if (_iconSettings[normalizedIconName]) {\r\n                _warnDuplicateIcon(iconName);\r\n            }\r\n            else {\r\n                _iconSettings[normalizedIconName] = {\r\n                    code,\r\n                    subset\r\n                };\r\n            }\r\n        }\r\n    }\r\n}\r\nexport function unregisterIcons(iconNames) {\r\n    const options = _iconSettings.__options;\r\n    for (const iconName of iconNames) {\r\n        const normalizedIconName = normalizeIconName(iconName);\r\n        if (_iconSettings[normalizedIconName]) {\r\n            delete _iconSettings[normalizedIconName];\r\n        }\r\n        else {\r\n            if (!options.disableWarnings) {\r\n                warn(`The icon \"${iconName}\" tried to unregister but was not registered.`);\r\n            }\r\n        }\r\n        if (_iconSettings.__remapped[normalizedIconName]) {\r\n            delete _iconSettings.__remapped[normalizedIconName];\r\n        }\r\n        Object.keys(_iconSettings.__remapped).forEach((key) => {\r\n            if (_iconSettings.__remapped[key] === normalizedIconName) {\r\n                delete _iconSettings.__remapped[key];\r\n            }\r\n        });\r\n    }\r\n}\r\nexport function registerIconAlias(iconName, mappedToName) {\r\n    _iconSettings.__remapped[normalizeIconName(iconName)] = normalizeIconName(mappedToName);\r\n}\r\nexport function getIcon(name) {\r\n    let icon = undefined;\r\n    const options = _iconSettings.__options;\r\n    name = name ? normalizeIconName(name) : '';\r\n    name = _iconSettings.__remapped[name] || name;\r\n    if (name) {\r\n        icon = _iconSettings[name];\r\n        if (icon) {\r\n            let { subset } = icon;\r\n            if (subset && subset.fontFace) {\r\n                if (!subset.isRegistered) {\r\n                    fontFace(subset.fontFace);\r\n                    subset.isRegistered = true;\r\n                }\r\n                if (!subset.className) {\r\n                    subset.className = mergeStyles(subset.style, {\r\n                        fontFamily: subset.fontFace.fontFamily,\r\n                        fontWeight: subset.fontFace.fontWeight || 'normal',\r\n                        fontStyle: subset.fontFace.fontStyle || 'normal'\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (!options.disableWarnings && options.warnOnMissingIcons) {\r\n                warn(`The icon \"${name}\" was used but not registered. See http://aka.ms/fabric-icon-usage for more information.`);\r\n            }\r\n        }\r\n    }\r\n    return icon;\r\n}\r\nexport function setIconOptions(options) {\r\n    _iconSettings.__options = {\r\n        ..._iconSettings.__options,\r\n        ...options\r\n    };\r\n}\r\nlet _missingIcons = [];\r\nlet _missingIconsTimer = undefined;\r\nfunction _warnDuplicateIcon(iconName) {\r\n    const options = _iconSettings.__options;\r\n    const warningDelay = 2000;\r\n    const maxIconsInMessage = 10;\r\n    if (!options.disableWarnings) {\r\n        _missingIcons.push(iconName);\r\n        if (_missingIconsTimer === undefined) {\r\n            _missingIconsTimer = self.setTimeout(() => {\r\n                warn(`Some icons were re-registered. Applications should only call registerIcons for any given ` +\r\n                    `icon once. Redefining what an icon is may have unintended consequences. Duplicates ` +\r\n                    `include: \\n` +\r\n                    _missingIcons.slice(0, maxIconsInMessage).join(', ') +\r\n                    (_missingIcons.length > maxIconsInMessage ? ` (+ ${_missingIcons.length - maxIconsInMessage} more)` : ''));\r\n                _missingIconsTimer = undefined;\r\n                _missingIcons = [];\r\n            }, warningDelay);\r\n        }\r\n    }\r\n}\r\n"}
