{"code":"import * as React from 'react';\r\nconst _syncModuleCache = typeof WeakMap !== 'undefined'\r\n    ?\r\n        new WeakMap()\r\n    : undefined;\r\nexport function asAsync(options) {\r\n    class Async extends React.Component {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.state = {\r\n                Component: _syncModuleCache ? _syncModuleCache.get(options.load) : undefined\r\n            };\r\n        }\r\n        render() {\r\n            const { forwardedRef, asyncPlaceholder: Placeholder, ...rest } = this.props;\r\n            const { Component } = this.state;\r\n            return Component ? React.createElement(Component, Object.assign({ ref: forwardedRef }, rest)) : Placeholder ? React.createElement(Placeholder, null) : null;\r\n        }\r\n        componentDidMount() {\r\n            let { Component } = this.state;\r\n            if (!Component) {\r\n                options\r\n                    .load()\r\n                    .then((LoadedComponent) => {\r\n                    if (LoadedComponent) {\r\n                        _syncModuleCache && _syncModuleCache.set(options.load, LoadedComponent);\r\n                        this.setState({\r\n                            Component: LoadedComponent\r\n                        }, options.onLoad);\r\n                    }\r\n                })\r\n                    .catch(options.onError);\r\n            }\r\n        }\r\n    }\r\n    return React.forwardRef((props, ref) => (React.createElement(Async, Object.assign({}, props, { forwardedRef: ref }))));\r\n}\r\n"}
