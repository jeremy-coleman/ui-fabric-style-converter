{"code":"import { Stylesheet } from '@uifabric/merge-styles';\r\nconst stylesheet = Stylesheet.getInstance();\r\nif (stylesheet && stylesheet.onReset) {\r\n    Stylesheet.getInstance().onReset(resetMemoizations);\r\n}\r\nlet _resetCounter = 0;\r\nconst _emptyObject = { empty: true };\r\nconst _dictionary = {};\r\nlet _weakMap = typeof WeakMap === 'undefined' ? null : WeakMap;\r\nexport function setMemoizeWeakMap(weakMap) {\r\n    _weakMap = weakMap;\r\n}\r\nexport function resetMemoizations() {\r\n    _resetCounter++;\r\n}\r\nexport function memoize(target, key, descriptor) {\r\n    let fn = memoizeFunction(descriptor.value && descriptor.value.bind(null));\r\n    return {\r\n        configurable: true,\r\n        get() {\r\n            return fn;\r\n        }\r\n    };\r\n}\r\nexport function memoizeFunction(cb, maxCacheSize = 100) {\r\n    if (!_weakMap) {\r\n        return cb;\r\n    }\r\n    let rootNode;\r\n    let cacheSize = 0;\r\n    let localResetCounter = _resetCounter;\r\n    return function memoizedFunction(...args) {\r\n        let currentNode = rootNode;\r\n        if (rootNode === undefined || localResetCounter !== _resetCounter || (maxCacheSize > 0 && cacheSize > maxCacheSize)) {\r\n            rootNode = _createNode();\r\n            cacheSize = 0;\r\n            localResetCounter = _resetCounter;\r\n        }\r\n        currentNode = rootNode;\r\n        for (let i = 0; i < args.length; i++) {\r\n            let arg = _normalizeArg(args[i]);\r\n            if (!currentNode.map.has(arg)) {\r\n                currentNode.map.set(arg, _createNode());\r\n            }\r\n            currentNode = currentNode.map.get(arg);\r\n        }\r\n        if (!currentNode.hasOwnProperty('value')) {\r\n            currentNode.value = cb(...args);\r\n            cacheSize++;\r\n        }\r\n        return currentNode.value;\r\n    };\r\n}\r\nfunction _normalizeArg(val) {\r\n    if (!val) {\r\n        return _emptyObject;\r\n    }\r\n    else if (typeof val === 'object' || typeof val === 'function') {\r\n        return val;\r\n    }\r\n    else if (!_dictionary[val]) {\r\n        _dictionary[val] = { val };\r\n    }\r\n    return _dictionary[val];\r\n}\r\nfunction _createNode() {\r\n    return {\r\n        map: _weakMap ? new _weakMap() : null\r\n    };\r\n}\r\n"}
