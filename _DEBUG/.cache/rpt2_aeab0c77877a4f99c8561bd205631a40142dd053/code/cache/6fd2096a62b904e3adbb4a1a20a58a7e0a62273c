{"code":"import { elementContainsAttribute, elementContains, getDocument, getWindow } from './dom';\r\nconst IS_FOCUSABLE_ATTRIBUTE = 'data-is-focusable';\r\nconst IS_VISIBLE_ATTRIBUTE = 'data-is-visible';\r\nconst FOCUSZONE_ID_ATTRIBUTE = 'data-focuszone-id';\r\nconst FOCUSZONE_SUB_ATTRIBUTE = 'data-is-sub-focuszone';\r\nexport function getFirstFocusable(rootElement, currentElement, includeElementsInFocusZones) {\r\n    return getNextElement(rootElement, currentElement, true, false, false, includeElementsInFocusZones);\r\n}\r\nexport function getLastFocusable(rootElement, currentElement, includeElementsInFocusZones) {\r\n    return getPreviousElement(rootElement, currentElement, true, false, true, includeElementsInFocusZones);\r\n}\r\nexport function getFirstTabbable(rootElement, currentElement, includeElementsInFocusZones) {\r\n    return getNextElement(rootElement, currentElement, true, false, false, includeElementsInFocusZones, false, true);\r\n}\r\nexport function getLastTabbable(rootElement, currentElement, includeElementsInFocusZones) {\r\n    return getPreviousElement(rootElement, currentElement, true, false, true, includeElementsInFocusZones, false, true);\r\n}\r\nexport function focusFirstChild(rootElement) {\r\n    let element = getNextElement(rootElement, rootElement, true, false, false, true);\r\n    if (element) {\r\n        focusAsync(element);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function getPreviousElement(rootElement, currentElement, checkNode, suppressParentTraversal, traverseChildren, includeElementsInFocusZones, allowFocusRoot, tabbable) {\r\n    if (!currentElement || (!allowFocusRoot && currentElement === rootElement)) {\r\n        return null;\r\n    }\r\n    let isCurrentElementVisible = isElementVisible(currentElement);\r\n    if (traverseChildren &&\r\n        isCurrentElementVisible &&\r\n        (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {\r\n        const childMatch = getPreviousElement(rootElement, currentElement.lastElementChild, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\r\n        if (childMatch) {\r\n            if ((tabbable && isElementTabbable(childMatch, true)) || !tabbable) {\r\n                return childMatch;\r\n            }\r\n            const childMatchSiblingMatch = getPreviousElement(rootElement, childMatch.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\r\n            if (childMatchSiblingMatch) {\r\n                return childMatchSiblingMatch;\r\n            }\r\n            let childMatchParent = childMatch.parentElement;\r\n            while (childMatchParent && childMatchParent !== currentElement) {\r\n                const childMatchParentMatch = getPreviousElement(rootElement, childMatchParent.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\r\n                if (childMatchParentMatch) {\r\n                    return childMatchParentMatch;\r\n                }\r\n                childMatchParent = childMatchParent.parentElement;\r\n            }\r\n        }\r\n    }\r\n    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement)) {\r\n        return currentElement;\r\n    }\r\n    const siblingMatch = getPreviousElement(rootElement, currentElement.previousElementSibling, true, true, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\r\n    if (siblingMatch) {\r\n        return siblingMatch;\r\n    }\r\n    if (!suppressParentTraversal) {\r\n        return getPreviousElement(rootElement, currentElement.parentElement, true, false, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\r\n    }\r\n    return null;\r\n}\r\nexport function getNextElement(rootElement, currentElement, checkNode, suppressParentTraversal, suppressChildTraversal, includeElementsInFocusZones, allowFocusRoot, tabbable) {\r\n    if (!currentElement || (currentElement === rootElement && suppressChildTraversal && !allowFocusRoot)) {\r\n        return null;\r\n    }\r\n    let isCurrentElementVisible = isElementVisible(currentElement);\r\n    if (checkNode && isCurrentElementVisible && isElementTabbable(currentElement, tabbable)) {\r\n        return currentElement;\r\n    }\r\n    if (!suppressChildTraversal &&\r\n        isCurrentElementVisible &&\r\n        (includeElementsInFocusZones || !(isElementFocusZone(currentElement) || isElementFocusSubZone(currentElement)))) {\r\n        const childMatch = getNextElement(rootElement, currentElement.firstElementChild, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\r\n        if (childMatch) {\r\n            return childMatch;\r\n        }\r\n    }\r\n    if (currentElement === rootElement) {\r\n        return null;\r\n    }\r\n    const siblingMatch = getNextElement(rootElement, currentElement.nextElementSibling, true, true, false, includeElementsInFocusZones, allowFocusRoot, tabbable);\r\n    if (siblingMatch) {\r\n        return siblingMatch;\r\n    }\r\n    if (!suppressParentTraversal) {\r\n        return getNextElement(rootElement, currentElement.parentElement, false, false, true, includeElementsInFocusZones, allowFocusRoot, tabbable);\r\n    }\r\n    return null;\r\n}\r\nexport function isElementVisible(element) {\r\n    if (!element || !element.getAttribute) {\r\n        return false;\r\n    }\r\n    const visibilityAttribute = element.getAttribute(IS_VISIBLE_ATTRIBUTE);\r\n    if (visibilityAttribute !== null && visibilityAttribute !== undefined) {\r\n        return visibilityAttribute === 'true';\r\n    }\r\n    return (element.offsetHeight !== 0 ||\r\n        element.offsetParent !== null ||\r\n        element.isVisible === true);\r\n}\r\nexport function isElementTabbable(element, checkTabIndex) {\r\n    if (!element || element.disabled) {\r\n        return false;\r\n    }\r\n    let tabIndex = 0;\r\n    let tabIndexAttributeValue = null;\r\n    if (element && element.getAttribute) {\r\n        tabIndexAttributeValue = element.getAttribute('tabIndex');\r\n        if (tabIndexAttributeValue) {\r\n            tabIndex = parseInt(tabIndexAttributeValue, 10);\r\n        }\r\n    }\r\n    let isFocusableAttribute = element.getAttribute ? element.getAttribute(IS_FOCUSABLE_ATTRIBUTE) : null;\r\n    let isTabIndexSet = tabIndexAttributeValue !== null && tabIndex >= 0;\r\n    const result = !!element &&\r\n        isFocusableAttribute !== 'false' &&\r\n        (element.tagName === 'A' ||\r\n            element.tagName === 'BUTTON' ||\r\n            element.tagName === 'INPUT' ||\r\n            element.tagName === 'TEXTAREA' ||\r\n            isFocusableAttribute === 'true' ||\r\n            isTabIndexSet ||\r\n            (element.getAttribute && element.getAttribute('role') === 'button'));\r\n    return checkTabIndex ? tabIndex !== -1 && result : result;\r\n}\r\nexport function isElementFocusZone(element) {\r\n    return !!(element && element.getAttribute && !!element.getAttribute(FOCUSZONE_ID_ATTRIBUTE));\r\n}\r\nexport function isElementFocusSubZone(element) {\r\n    return !!(element && element.getAttribute && element.getAttribute(FOCUSZONE_SUB_ATTRIBUTE) === 'true');\r\n}\r\nexport function doesElementContainFocus(element) {\r\n    let document = getDocument(element);\r\n    let currentActiveElement = document && document.activeElement;\r\n    if (currentActiveElement && elementContains(element, currentActiveElement)) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function shouldWrapFocus(element, noWrapDataAttribute) {\r\n    return elementContainsAttribute(element, noWrapDataAttribute) === 'true' ? false : true;\r\n}\r\nlet targetToFocusOnNextRepaint = undefined;\r\nexport function focusAsync(element) {\r\n    if (element) {\r\n        if (targetToFocusOnNextRepaint) {\r\n            targetToFocusOnNextRepaint = element;\r\n            return;\r\n        }\r\n        targetToFocusOnNextRepaint = element;\r\n        const win = getWindow(element);\r\n        if (win) {\r\n            win.requestAnimationFrame(() => {\r\n                targetToFocusOnNextRepaint && targetToFocusOnNextRepaint.focus();\r\n                targetToFocusOnNextRepaint = undefined;\r\n            });\r\n        }\r\n    }\r\n}\r\n"}
