{"code":"export const InjectionMode = {\r\n    none: 0,\r\n    insertNode: 1,\r\n    appendChild: 2\r\n};\r\nconst STYLESHEET_SETTING = '__stylesheet__';\r\nconst _fileScopedGlobal = {};\r\nlet _stylesheet;\r\nexport class Stylesheet {\r\n    constructor(config) {\r\n        this._rules = [];\r\n        this._preservedRules = [];\r\n        this._rulesToInsert = [];\r\n        this._counter = 0;\r\n        this._keyToClassName = {};\r\n        this._onResetCallbacks = [];\r\n        this._classNameToArgs = {};\r\n        this._config = {\r\n            injectionMode: InjectionMode.insertNode,\r\n            defaultPrefix: 'css',\r\n            namespace: undefined,\r\n            ...config\r\n        };\r\n    }\r\n    static getInstance() {\r\n        const global = typeof window !== 'undefined' ? window : typeof process !== 'undefined' ? process : _fileScopedGlobal;\r\n        _stylesheet = global[STYLESHEET_SETTING];\r\n        if (!_stylesheet || (_stylesheet._lastStyleElement && _stylesheet._lastStyleElement.ownerDocument !== document)) {\r\n            const fabricConfig = (global && global['FabricConfig']) || {};\r\n            _stylesheet = global[STYLESHEET_SETTING] = new Stylesheet(fabricConfig.mergeStyles);\r\n        }\r\n        return _stylesheet;\r\n    }\r\n    setConfig(config) {\r\n        this._config = {\r\n            ...this._config,\r\n            ...config\r\n        };\r\n    }\r\n    onReset(callback) {\r\n        this._onResetCallbacks.push(callback);\r\n    }\r\n    getClassName(displayName) {\r\n        const { namespace } = this._config;\r\n        const prefix = displayName || this._config.defaultPrefix;\r\n        return `${namespace ? namespace + '-' : ''}${prefix}-${this._counter++}`;\r\n    }\r\n    cacheClassName(className, key, args, rules) {\r\n        this._keyToClassName[key] = className;\r\n        this._classNameToArgs[className] = {\r\n            args,\r\n            rules\r\n        };\r\n    }\r\n    classNameFromKey(key) {\r\n        return this._keyToClassName[key];\r\n    }\r\n    argsFromClassName(className) {\r\n        const entry = this._classNameToArgs[className];\r\n        return entry && entry.args;\r\n    }\r\n    insertedRulesFromClassName(className) {\r\n        const entry = this._classNameToArgs[className];\r\n        return entry && entry.rules;\r\n    }\r\n    insertRule(rule, preserve) {\r\n        const { injectionMode } = this._config;\r\n        const element = injectionMode !== InjectionMode.none ? this._getStyleElement() : undefined;\r\n        if (preserve) {\r\n            this._preservedRules.push(rule);\r\n        }\r\n        if (element) {\r\n            switch (this._config.injectionMode) {\r\n                case InjectionMode.insertNode:\r\n                    const { sheet } = element;\r\n                    try {\r\n                        sheet.insertRule(rule, sheet.cssRules.length);\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                    break;\r\n                case InjectionMode.appendChild:\r\n                    element.appendChild(document.createTextNode(rule));\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            this._rules.push(rule);\r\n        }\r\n        if (this._config.onInsertRule) {\r\n            this._config.onInsertRule(rule);\r\n        }\r\n    }\r\n    getRules(includePreservedRules) {\r\n        return (includePreservedRules ? this._preservedRules.join('') : '') + this._rules.join('') + this._rulesToInsert.join('');\r\n    }\r\n    reset() {\r\n        this._rules = [];\r\n        this._rulesToInsert = [];\r\n        this._counter = 0;\r\n        this._classNameToArgs = {};\r\n        this._keyToClassName = {};\r\n        this._onResetCallbacks.forEach((callback) => callback());\r\n    }\r\n    resetKeys() {\r\n        this._keyToClassName = {};\r\n    }\r\n    _getStyleElement() {\r\n        if (!this._styleElement && typeof document !== 'undefined') {\r\n            this._styleElement = this._createStyleElement();\r\n            window.requestAnimationFrame(() => {\r\n                this._styleElement = undefined;\r\n            });\r\n        }\r\n        return this._styleElement;\r\n    }\r\n    _createStyleElement() {\r\n        const styleElement = document.createElement('style');\r\n        styleElement.setAttribute('data-merge-styles', 'true');\r\n        styleElement.type = 'text/css';\r\n        if (this._lastStyleElement && this._lastStyleElement.nextElementSibling) {\r\n            document.head.insertBefore(styleElement, this._lastStyleElement.nextElementSibling);\r\n        }\r\n        else {\r\n            document.head.appendChild(styleElement);\r\n        }\r\n        this._lastStyleElement = styleElement;\r\n        return styleElement;\r\n    }\r\n}\r\n"}
