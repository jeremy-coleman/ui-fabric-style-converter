{"code":"import * as React from 'react';\r\nimport { BaseComponent } from './BaseComponent';\r\nimport { Customizations } from './Customizations';\r\nexport const CustomizerContext = React.createContext({\r\n    customizations: {\r\n        inCustomizerContext: false,\r\n        settings: {},\r\n        scopedSettings: {}\r\n    }\r\n});\r\nexport class Customizer extends BaseComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        this._changeCount = 0;\r\n        this._onCustomizationChange = () => this.forceUpdate();\r\n    }\r\n    componentDidMount() {\r\n        Customizations.observe(this._onCustomizationChange);\r\n    }\r\n    componentWillUnmount() {\r\n        Customizations.unobserve(this._onCustomizationChange);\r\n    }\r\n    render() {\r\n        const { contextTransform } = this.props;\r\n        return (React.createElement(CustomizerContext.Consumer, null, (parentContext) => {\r\n            let newContext = mergeCustomizations(this.props, parentContext);\r\n            if (contextTransform) {\r\n                newContext = contextTransform(newContext);\r\n            }\r\n            return React.createElement(CustomizerContext.Provider, { value: newContext }, this.props.children);\r\n        }));\r\n    }\r\n}\r\nexport function mergeCustomizations(props, parentContext) {\r\n    const { customizations = { settings: {}, scopedSettings: {} } } = parentContext || {};\r\n    return {\r\n        customizations: {\r\n            settings: mergeSettings(customizations.settings, props.settings),\r\n            scopedSettings: mergeScopedSettings(customizations.scopedSettings, props.scopedSettings),\r\n            inCustomizerContext: true\r\n        }\r\n    };\r\n}\r\nexport function mergeSettings(oldSettings = {}, newSettings) {\r\n    const mergeSettingsWith = isSettingsFunction(newSettings) ? newSettings : settingsMergeWith(newSettings);\r\n    return mergeSettingsWith(oldSettings);\r\n}\r\nfunction mergeScopedSettings(oldSettings = {}, newSettings) {\r\n    const mergeSettingsWith = isSettingsFunction(newSettings) ? newSettings : scopedSettingsMergeWith(newSettings);\r\n    return mergeSettingsWith(oldSettings);\r\n}\r\nfunction isSettingsFunction(settings) {\r\n    return typeof settings === 'function';\r\n}\r\nfunction settingsMergeWith(newSettings) {\r\n    return (settings) => (newSettings ? { ...settings, ...newSettings } : settings);\r\n}\r\nfunction scopedSettingsMergeWith(scopedSettingsFromProps = {}) {\r\n    return (oldScopedSettings) => {\r\n        const newScopedSettings = { ...oldScopedSettings };\r\n        for (let scopeName in scopedSettingsFromProps) {\r\n            if (scopedSettingsFromProps.hasOwnProperty(scopeName)) {\r\n                newScopedSettings[scopeName] = { ...oldScopedSettings[scopeName], ...scopedSettingsFromProps[scopeName] };\r\n            }\r\n        }\r\n        return newScopedSettings;\r\n    };\r\n}\r\n"}
