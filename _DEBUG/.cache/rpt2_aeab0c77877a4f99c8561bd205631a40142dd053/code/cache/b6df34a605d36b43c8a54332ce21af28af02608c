{"code":"import { Stylesheet } from '@uifabric/merge-styles';\r\nconst CURRENT_ID_PROPERTY = '__currentId__';\r\nconst DEFAULT_ID_STRING = 'id__';\r\nlet _global = (typeof window !== 'undefined' && window) || process;\r\nif (_global[CURRENT_ID_PROPERTY] === undefined) {\r\n    _global[CURRENT_ID_PROPERTY] = 0;\r\n}\r\nfunction checkProperties(a, b) {\r\n    for (let propName in a) {\r\n        if (a.hasOwnProperty(propName)) {\r\n            if (!b.hasOwnProperty(propName) || b[propName] !== a[propName]) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}\r\nexport function shallowCompare(a, b) {\r\n    return checkProperties(a, b) && checkProperties(b, a);\r\n}\r\nexport function assign(target, ...args) {\r\n    return filteredAssign.apply(this, [null, target].concat(args));\r\n}\r\nexport function filteredAssign(isAllowed, target, ...args) {\r\n    target = target || {};\r\n    for (let sourceObject of args) {\r\n        if (sourceObject) {\r\n            for (let propName in sourceObject) {\r\n                if (sourceObject.hasOwnProperty(propName) && (!isAllowed || isAllowed(propName))) {\r\n                    target[propName] = sourceObject[propName];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return target;\r\n}\r\nconst stylesheet = Stylesheet.getInstance();\r\nif (stylesheet && stylesheet.onReset) {\r\n    stylesheet.onReset(resetIds);\r\n}\r\nexport function getId(prefix) {\r\n    let index = _global[CURRENT_ID_PROPERTY]++;\r\n    return (prefix || DEFAULT_ID_STRING) + index;\r\n}\r\nexport function resetIds(counter = 0) {\r\n    _global[CURRENT_ID_PROPERTY] = counter;\r\n}\r\nexport function mapEnumByName(theEnum, callback) {\r\n    return Object.keys(theEnum)\r\n        .map((p) => {\r\n        if (String(Number(p)) !== p) {\r\n            return callback(p, theEnum[p]);\r\n        }\r\n    })\r\n        .filter((v) => !!v);\r\n}\r\nexport function values(obj) {\r\n    return Object.keys(obj).reduce((arr, key) => {\r\n        arr.push(obj[key]);\r\n        return arr;\r\n    }, []);\r\n}\r\n"}
