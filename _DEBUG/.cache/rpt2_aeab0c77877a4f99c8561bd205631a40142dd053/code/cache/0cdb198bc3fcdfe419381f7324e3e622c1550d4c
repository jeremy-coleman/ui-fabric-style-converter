{"code":"import { assign } from './object';\r\nexport class EventGroup {\r\n    constructor(parent) {\r\n        this._id = EventGroup._uniqueId++;\r\n        this._parent = parent;\r\n        this._eventRecords = [];\r\n    }\r\n    static raise(target, eventName, eventArgs, bubbleEvent) {\r\n        let retVal;\r\n        if (EventGroup._isElement(target)) {\r\n            if (document.createEvent) {\r\n                let ev = document.createEvent('HTMLEvents');\r\n                ev.initEvent(eventName, bubbleEvent || false, true);\r\n                assign(ev, eventArgs);\r\n                retVal = target.dispatchEvent(ev);\r\n            }\r\n            else if (document['createEventObject']) {\r\n                let evObj = document['createEventObject'](eventArgs);\r\n                target.fireEvent('on' + eventName, evObj);\r\n            }\r\n        }\r\n        else {\r\n            while (target && retVal !== false) {\r\n                let events = target.__events__;\r\n                let eventRecords = events ? events[eventName] : null;\r\n                if (eventRecords) {\r\n                    for (let id in eventRecords) {\r\n                        if (eventRecords.hasOwnProperty(id)) {\r\n                            let eventRecordList = eventRecords[id];\r\n                            for (let listIndex = 0; retVal !== false && listIndex < eventRecordList.length; listIndex++) {\r\n                                let record = eventRecordList[listIndex];\r\n                                if (record.objectCallback) {\r\n                                    retVal = record.objectCallback.call(record.parent, eventArgs);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                target = bubbleEvent ? target.parent : null;\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n    static isObserved(target, eventName) {\r\n        let events = target && target.__events__;\r\n        return !!events && !!events[eventName];\r\n    }\r\n    static isDeclared(target, eventName) {\r\n        let declaredEvents = target && target.__declaredEvents;\r\n        return !!declaredEvents && !!declaredEvents[eventName];\r\n    }\r\n    static stopPropagation(event) {\r\n        if (event.stopPropagation) {\r\n            event.stopPropagation();\r\n        }\r\n        else {\r\n            event.cancelBubble = true;\r\n        }\r\n    }\r\n    static _isElement(target) {\r\n        return !!target && (!!target.addEventListener || (typeof HTMLElement !== 'undefined' && target instanceof HTMLElement));\r\n    }\r\n    dispose() {\r\n        if (!this._isDisposed) {\r\n            this._isDisposed = true;\r\n            this.off();\r\n            this._parent = null;\r\n        }\r\n    }\r\n    onAll(target, events, useCapture) {\r\n        for (let eventName in events) {\r\n            if (events.hasOwnProperty(eventName)) {\r\n                this.on(target, eventName, events[eventName], useCapture);\r\n            }\r\n        }\r\n    }\r\n    on(target, eventName, callback, useCapture) {\r\n        if (eventName.indexOf(',') > -1) {\r\n            let events = eventName.split(/[ ,]+/);\r\n            for (let i = 0; i < events.length; i++) {\r\n                this.on(target, events[i], callback, useCapture);\r\n            }\r\n        }\r\n        else {\r\n            let parent = this._parent;\r\n            let eventRecord = {\r\n                target: target,\r\n                eventName: eventName,\r\n                parent: parent,\r\n                callback: callback,\r\n                useCapture: useCapture || false\r\n            };\r\n            let events = (target.__events__ = target.__events__ || {});\r\n            events[eventName] =\r\n                events[eventName] ||\r\n                    {\r\n                        count: 0\r\n                    };\r\n            events[eventName][this._id] = events[eventName][this._id] || [];\r\n            events[eventName][this._id].push(eventRecord);\r\n            events[eventName].count++;\r\n            if (EventGroup._isElement(target)) {\r\n                let processElementEvent = (...args) => {\r\n                    if (this._isDisposed) {\r\n                        return;\r\n                    }\r\n                    let result;\r\n                    try {\r\n                        result = callback.apply(parent, args);\r\n                        if (result === false && args[0]) {\r\n                            let e = args[0];\r\n                            if (e.preventDefault) {\r\n                                e.preventDefault();\r\n                            }\r\n                            if (e.stopPropagation) {\r\n                                e.stopPropagation();\r\n                            }\r\n                            e.cancelBubble = true;\r\n                        }\r\n                    }\r\n                    catch (e) {\r\n                    }\r\n                    return result;\r\n                };\r\n                eventRecord.elementCallback = processElementEvent;\r\n                if (target.addEventListener) {\r\n                    target.addEventListener(eventName, processElementEvent, useCapture);\r\n                }\r\n                else if (target.attachEvent) {\r\n                    target.attachEvent('on' + eventName, processElementEvent);\r\n                }\r\n            }\r\n            else {\r\n                let processObjectEvent = (...args) => {\r\n                    if (this._isDisposed) {\r\n                        return;\r\n                    }\r\n                    return callback.apply(parent, args);\r\n                };\r\n                eventRecord.objectCallback = processObjectEvent;\r\n            }\r\n            this._eventRecords.push(eventRecord);\r\n        }\r\n    }\r\n    off(target, eventName, callback, useCapture) {\r\n        for (let i = 0; i < this._eventRecords.length; i++) {\r\n            let eventRecord = this._eventRecords[i];\r\n            if ((!target || target === eventRecord.target) &&\r\n                (!eventName || eventName === eventRecord.eventName) &&\r\n                (!callback || callback === eventRecord.callback) &&\r\n                (typeof useCapture !== 'boolean' || useCapture === eventRecord.useCapture)) {\r\n                let events = eventRecord.target.__events__;\r\n                let targetArrayLookup = events[eventRecord.eventName];\r\n                let targetArray = targetArrayLookup ? targetArrayLookup[this._id] : null;\r\n                if (targetArray) {\r\n                    if (targetArray.length === 1 || !callback) {\r\n                        targetArrayLookup.count -= targetArray.length;\r\n                        delete events[eventRecord.eventName][this._id];\r\n                    }\r\n                    else {\r\n                        targetArrayLookup.count--;\r\n                        targetArray.splice(targetArray.indexOf(eventRecord), 1);\r\n                    }\r\n                    if (!targetArrayLookup.count) {\r\n                        delete events[eventRecord.eventName];\r\n                    }\r\n                }\r\n                if (eventRecord.elementCallback) {\r\n                    if (eventRecord.target.removeEventListener) {\r\n                        eventRecord.target.removeEventListener(eventRecord.eventName, eventRecord.elementCallback, eventRecord.useCapture);\r\n                    }\r\n                    else if (eventRecord.target.detachEvent) {\r\n                        eventRecord.target.detachEvent('on' + eventRecord.eventName, eventRecord.elementCallback);\r\n                    }\r\n                }\r\n                this._eventRecords.splice(i--, 1);\r\n            }\r\n        }\r\n    }\r\n    raise(eventName, eventArgs, bubbleEvent) {\r\n        return EventGroup.raise(this._parent, eventName, eventArgs, bubbleEvent);\r\n    }\r\n    declare(event) {\r\n        let declaredEvents = (this._parent.__declaredEvents = this._parent.__declaredEvents || {});\r\n        if (typeof event === 'string') {\r\n            declaredEvents[event] = true;\r\n        }\r\n        else {\r\n            for (let i = 0; i < event.length; i++) {\r\n                declaredEvents[event[i]] = true;\r\n            }\r\n        }\r\n    }\r\n}\r\nEventGroup._uniqueId = 0;\r\n"}
