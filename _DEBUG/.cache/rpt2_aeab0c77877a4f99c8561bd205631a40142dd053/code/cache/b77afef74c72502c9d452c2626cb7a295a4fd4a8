{"code":"export const DATA_PORTAL_ATTRIBUTE = 'data-portal-element';\r\nexport function setVirtualParent(child, parent) {\r\n    let virtualChild = child;\r\n    let virtualParent = parent;\r\n    if (!virtualChild._virtual) {\r\n        virtualChild._virtual = {\r\n            children: []\r\n        };\r\n    }\r\n    let oldParent = virtualChild._virtual.parent;\r\n    if (oldParent && oldParent !== parent) {\r\n        let index = oldParent._virtual.children.indexOf(virtualChild);\r\n        if (index > -1) {\r\n            oldParent._virtual.children.splice(index, 1);\r\n        }\r\n    }\r\n    virtualChild._virtual.parent = virtualParent || undefined;\r\n    if (virtualParent) {\r\n        if (!virtualParent._virtual) {\r\n            virtualParent._virtual = {\r\n                children: []\r\n            };\r\n        }\r\n        virtualParent._virtual.children.push(virtualChild);\r\n    }\r\n}\r\nexport function getVirtualParent(child) {\r\n    let parent;\r\n    if (child && isVirtualElement(child)) {\r\n        parent = child._virtual.parent;\r\n    }\r\n    return parent;\r\n}\r\nexport function getParent(child, allowVirtualParents = true) {\r\n    return child && ((allowVirtualParents && getVirtualParent(child)) || (child.parentNode && child.parentNode));\r\n}\r\nexport function getChildren(parent, allowVirtualChildren = true) {\r\n    const children = [];\r\n    if (parent) {\r\n        for (let i = 0; i < parent.children.length; i++) {\r\n            children.push(parent.children.item(i));\r\n        }\r\n        if (allowVirtualChildren && isVirtualElement(parent)) {\r\n            children.push(...parent._virtual.children);\r\n        }\r\n    }\r\n    return children;\r\n}\r\nexport function elementContains(parent, child, allowVirtualParents = true) {\r\n    let isContained = false;\r\n    if (parent && child) {\r\n        if (allowVirtualParents) {\r\n            isContained = false;\r\n            while (child) {\r\n                let nextParent = getParent(child);\r\n                if (nextParent === parent) {\r\n                    isContained = true;\r\n                    break;\r\n                }\r\n                child = nextParent;\r\n            }\r\n        }\r\n        else if (parent.contains) {\r\n            isContained = parent.contains(child);\r\n        }\r\n    }\r\n    return isContained;\r\n}\r\nlet _isSSR = false;\r\nexport function setSSR(isEnabled) {\r\n    _isSSR = isEnabled;\r\n}\r\nexport function getWindow(rootElement) {\r\n    if (_isSSR || typeof window === 'undefined') {\r\n        return undefined;\r\n    }\r\n    else {\r\n        return rootElement && rootElement.ownerDocument && rootElement.ownerDocument.defaultView\r\n            ? rootElement.ownerDocument.defaultView\r\n            : window;\r\n    }\r\n}\r\nexport function getDocument(rootElement) {\r\n    if (_isSSR || typeof document === 'undefined') {\r\n        return undefined;\r\n    }\r\n    else {\r\n        return rootElement && rootElement.ownerDocument ? rootElement.ownerDocument : document;\r\n    }\r\n}\r\nexport function getRect(element) {\r\n    let rect;\r\n    if (element) {\r\n        if (element === window) {\r\n            rect = {\r\n                left: 0,\r\n                top: 0,\r\n                width: window.innerWidth,\r\n                height: window.innerHeight,\r\n                right: window.innerWidth,\r\n                bottom: window.innerHeight\r\n            };\r\n        }\r\n        else if (element.getBoundingClientRect) {\r\n            rect = element.getBoundingClientRect();\r\n        }\r\n    }\r\n    return rect;\r\n}\r\nexport function setPortalAttribute(element) {\r\n    element.setAttribute(DATA_PORTAL_ATTRIBUTE, 'true');\r\n}\r\nexport function portalContainsElement(target, parent) {\r\n    const elementMatch = findElementRecursive(target, (testElement) => parent === testElement || testElement.hasAttribute(DATA_PORTAL_ATTRIBUTE));\r\n    return elementMatch !== null && elementMatch.hasAttribute(DATA_PORTAL_ATTRIBUTE);\r\n}\r\nexport function findElementRecursive(element, matchFunction) {\r\n    if (!element || element === document.body) {\r\n        return null;\r\n    }\r\n    return matchFunction(element) ? element : findElementRecursive(getParent(element), matchFunction);\r\n}\r\nexport function elementContainsAttribute(element, attribute) {\r\n    let elementMatch = findElementRecursive(element, (testElement) => testElement.hasAttribute(attribute));\r\n    return elementMatch && elementMatch.getAttribute(attribute);\r\n}\r\nfunction isVirtualElement(element) {\r\n    return element && !!element._virtual;\r\n}\r\n"}
